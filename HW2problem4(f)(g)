import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# 1. Read the data
data = pd.read_csv('C:/Users/92605/Desktop/156MachineLearning/Assignments/wine+quality/winequality_red.csv', delimiter=';')

# 2. Input and target variable
X = data.drop(columns=['quality']).values  
y = data['quality'].values  

# 3. Split the dataset into train, validation, and test sets.
X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.1,random_state=2)
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.1667,random_state=2)

# 4. Data Standardization
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)  
X_val = scaler.transform(X_val)          
X_test = scaler.transform(X_test)        

# 5. Add a bias term to the training, validation, and test data
X_train_b = np.c_[np.ones((X_train.shape[0], 1)), X_train]  # Add a column of ones
X_val_b = np.c_[np.ones((X_val.shape[0], 1)), X_val]  # Add bias term
X_test_b = np.c_[np.ones((X_test.shape[0], 1)), X_test]  # Add bias term

# 6. Initialize weights with random values
w = np.random.rand(X_train_b.shape[1])  # Weight initialization

# 7. Set learning rate and number of iterations
learning_rate = 0.01 
num_iterations = 1000

# 8. LMS Algorithm
for iteration in range(num_iterations):
    for i in range(X_train_b.shape[0]):
        y_pred = np.dot(X_train_b[i], w)  # Make prediction
        error = y_pred - y_train[i]  # Calculate error
        
        w -= learning_rate * error * X_train_b[i]  # Update weights


# 9. Predictions
y_train_predict = np.dot(X_train_b, w)  # Predictions for training set
y_test_predict = np.dot(X_test_b, w)    # Predictions for test set

# 10. Calculate RMS for training and test sets
train_mse = np.mean((y_train_predict - y_train) ** 2)
train_rms = np.sqrt(train_mse)
test_mse = np.mean((y_test_predict - y_test) ** 2)
test_rms = np.sqrt(test_mse)

# 11. Report results
print("Final weights (w):")
print(w)
print("Training set root mean square (RMS):", train_rms)
print("Test set root mean square (RMS):", test_rms)
